attach  spec  for building taskmanager   siloution using  : ,  C#    +  RAZOR  + REACT     /  help me build all this   :


האפיון שמסרת מתאר את משימת פיתוח מערכת לניהול משימות, שמיועדת להיות מערכת גמישה ומורחבת. הנה עיקרי הדברים:

1. מטרה
אתה מתבקש לבנות גרסה ראשונית של פלטפורמת ניהול משימות שתפריד בין חוקים כלליים של זרימת עבודה לבין חוקים ספציפיים לכל סוג משימה. המערכת צריכה להיות גמישה ויכולה להכיל סוגי משימות נוספים בעתיד מבלי לבצע שינויים מבניים משמעותיים.

2. חוקים כלליים (לגבי כל משימה)
משימה תמיד משויכת למשתמש אחד בלבד.

המשימה יכולה להיות בסטטוס "פתוח" או "סגור", כאשר משימות סגורות אינן ניתנות לשינוי.

תהליך העבודה נמדד על ידי סטטוסי משימה שנעים מ-1 ועד אינסוף.

לא ניתן לקפוץ בין שלבים (למשל לעבור מסטטוס 1 לסטטוס 3 ישירות), אבל ניתן לחזור אחורה.

משימה תוכל להיסגר רק לאחר שהגיעה לסטטוס הסופי שלה.

כל שינוי בסטטוס חייב להימנע ממעבר לא חוקי ולתעד את המשתמש הבא שמקבל את המשימה.

3. סוגי משימות מוגדרות
משימת רכש: כוללת שלושה שלבים, והמעברים בין השלבים מותנים בקיום נתונים ספציפיים.

משימת פיתוח: כוללת ארבעה שלבים, כל מעבר בין שלב לשלב דורש נתונים נוספים, והמשימה יכולה להיסגר רק מהשלב האחרון.

4. דרישות מערכת
יצירת משימה חדשה: יצירת משימה מסוג רכש או פיתוח עם משתמש ראשוני.

שינוי שלב: תמיכה בשני סוגי המשימות (רכש ופיתוח), עם אכיפת כללים כללים וספציפיים.

סגירת משימה: סגירה מתבצעת רק אחרי שהמשימה הגיעה לסטטוס הסופי שלה.

הצגת משימות למשתמש: כל משתמש יכול לראות את המשימות המוקצות לו.

5. דרישות שרת
השתמש ב-Entity Framework Core על גבי SQL Server.

יש להקים API REST שמתממשק עם הלקוח React (לפי הנחיות REST).

המערכת צריכה להיות ארגונית בהתאם לשיטות עבודה טובות ב-.NET Core.

6. דרישות לקוח
יש לספק שני ממשקים: אחד ב-React ואחד ב-MVC.

הממשקים צריכים לאפשר יצירת משימות, ניהול מחזורי החיים של משימות רכש ופיתוח, הצגת משימות למשתמש ועוד.

7. דרישות סופיות
קוד המקור של הפתרון, כולל פרויקט React.

קובץ README עם שלבים להתקנה.

Scripts SQL או מיגרציות לבסיס הנתונים, כולל הכנסת משתמשים לדוגמה.

בבקשה תעדכן אותי אם דרושים לך הסברים נוספים או עזרה בפרטי ביצוע כל דרישה.